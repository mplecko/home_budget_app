{
  "openapi": "3.0.1",
  "info": {
    "title": "Home budget API",
    "version": "v1"
  },
  "paths": {
    "/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
    "summary": "Sign up a new user",
    "operationId": "signUpUser",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "password_confirmation": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "first_name",
                  "last_name",
                  "password",
                  "password_confirmation"
                ]
              }
            }
          }
        }
      }
    },
        "responses": {
          "200": {
            "description": "User signed up successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log in a user",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "password": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email",
                      "password"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged in successfully, returns JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "email": {
                              "type": "string"
                            },
                            "first_name": {
                              "type": "string"
                            },
                            "last_name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
"/logout": {
  "delete": {
    "tags": [
      "Authentication"
    ],
    "summary": "Log out a user",
    "operationId": "logoutUser",
    "security": [
      {
        "Bearer": []
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
        "responses": {
          "200": {
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No active session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/users/budget": {
      "get": {
        "summary": "Get the current user's budget",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Budget found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "budget": {
                      "type": "number",
                      "example": 850.00
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "You need to sign in or sign up before continuing."
                    }
                  }
                }
              }
            }
          },
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "get categories",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "categories found"
          },
          "401": {
            "description": "unauthorized"
          },
        }
      },
      "post": {
        "summary": "create category",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "category created"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "invalid request"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the category",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "show category",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "category found"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "put": {
        "summary": "update category",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "category updated"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "invalid request"
          },
          "404": {
            "description": "category not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete category",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "category deleted"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "cannot delete category with associated expenses"
          },
          "404": {
            "description": "category not found"
          }
        }
      }
    },
    "/expenses": {
      "get": {
        "summary": "Retrieves all expenses",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "expenses found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/expense"
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized"
          },
        }
      },
      "post": {
        "summary": "Creates a new expense",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "expense created"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "invalid request"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "category_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "description",
                  "amount",
                  "date",
                  "category_id"
                ]
              }
            }
          }
        }
      }
    },
    "/expenses/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the expense",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "show expense",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "responses": {
          "200": {
            "description": "expense found"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "expense not found"
          }
        }
      },
      "put": {
        "summary": "update expense",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "expense updated"
          },
          "422": {
            "description": "invalid request"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "expense not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "category_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "description",
                  "amount",
                  "date",
                  "category_id"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete expense",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "responses": {
          "204": {
            "description": "expense deleted"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "expense not found"
          }
        }
      }
    },
    "/expenses/filter": {
      "get": {
        "summary": "Filters expenses based on various parameters",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "format": "date",
            "description": "Start date for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "format": "date",
            "description": "End date for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_price",
            "in": "query",
            "description": "Minimum price for filtering",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "max_price",
            "in": "query",
            "description": "Maximum price for filtering",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Category ID for filtering",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "expenses filtered by category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/expense"
                  }
                }
              }
            }
          },
          "400": {
            "description": "min price greater than max price",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Minimum price must be less than or equal to maximum price"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Category not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "budget": {
            "type": "number",
            "format": "float"
          },
          "budget_reset_date": {
            "type": "string",
            "format": "date"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email",
          "budget",
          "budget_reset_date"
        ],
        "example": {
          "id": 1,
          "first_name": "John",
          "last_name": "Doe",
          "email": "johndoe@mail.com",
          "budget": 1000.00,
          "budget_reset_date": "2024-01-01",
          "created_at": "2024-01-01T00:00:00Z",
          "updated_at": "2024-01-01T00:00:00Z"
        }
      },
      "expense": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "category_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "amount",
          "date",
          "category_id",
          "user_id"
        ],
        "example": {
          "id": 1,
          "description": "Grocery Shopping",
          "amount": 45.99,
          "date": "2024-01-15",
          "category_id": 1,
          "user_id": 1,
          "created_at": "2024-01-01T00:00:00Z",
          "updated_at": "2024-01-01T00:00:00Z"
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name"
        ],
        "example": {
          "id": 1,
          "name": "Groceries",
          "created_at": "2024-01-01T00:00:00Z",
          "updated_at": "2024-01-01T00:00:00Z"
        }
      }
    },
    "responses": {
      "UnprocessableEntity": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "errors": [
                "Name can't be blank"
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "error": [
                "Not Found"
              ]
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "error": [
                "param is missing or the value is empty: param_name"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
